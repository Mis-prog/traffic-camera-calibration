import numpy as np
from scipy.optimize import least_squares

from calibration.base import Calibration
from core.camera import Camera
from core.pointND import PointND
from .error_funk import compute_total_residuals


class BackProjectionOptimizer(Calibration):
    def __init__(self, camera: Camera, debug_save_path: str = None):
        super().__init__(camera, debug_save_path)

    def run(self, data, **kwargs) -> Camera:
        """
        :param data: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        :return: –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞
        """

        residual_blocks = kwargs.get("resuals_blocks", None)
        print("=" * 50)
        print("üîß [BackProjectionOptimizer] –ó–∞–ø—É—Å–∫ –¥–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã")
        print("=" * 50)

        init_params = self.camera.get_params()
        print(f"üìå –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {np.round(init_params, 4)}")

        res_fn = lambda p: compute_total_residuals(self.camera, data, p, residual_blocks)

        result = least_squares(res_fn, init_params, verbose=2)

        print("-" * 50)
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print(f"üîÅ –ò—Ç–µ—Ä–∞—Ü–∏–π: {result.nfev}")
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (cost): {result.cost:.6f}")
        print(f"üìç –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {np.round(result.x, 4)}")
        self.camera.set_params_from_list(result.x)
