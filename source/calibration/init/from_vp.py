import numpy as np
from ..base import Calibration
from source.core import Camera, PointND


class VanishingPointCalibration(Calibration):
    def __init__(self, camera: Camera, debug_save_path: str = None):
        super().__init__(camera, debug_save_path)
        self.vpX = None  # —Ç–æ—á–∫–∞ —Å—Ö–æ–¥–∞ –ø–æ –æ—Å–∏ X (–≥–æ—Ä–∏–∑–æ–Ω—Ç)
        self.vpY = None  # —Ç–æ—á–∫–∞ —Å—Ö–æ–¥–∞ –ø–æ –æ—Å–∏ Y (–≥–æ—Ä–∏–∑–æ–Ω—Ç)
        self.vpZ = None  # —Ç–æ—á–∫–∞ —Å—Ö–æ–¥–∞ –ø–æ –æ—Å–∏ Z (–≤–µ—Ä—Ç–∏–∫–∞–ª—å)

    def set_vanishing_points(self, vpX, vpY=None, vpZ=None):
        self.vpX = np.array(vpX, dtype=float)
        if vpY is not None:
            self.vpY = np.array(vpY, dtype=float)
        if vpZ is not None:
            self.vpZ = np.array(vpZ, dtype=float)

    def calc_f(self):
        cx, cy = self.camera.intrinsics.get_main_point()
        c = np.array([cx, cy, 1.0])

        if self.vpX is not None and self.vpZ is not None:
            v1 = np.append(self.vpX, 1.0)
            v2 = np.append(self.vpZ, 1.0)

            term = np.dot(v1 - c, c - v2)
            if term <= 0:
                raise ValueError("–ü–æ–¥–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ—á–∫–∏ —Å—Ö–æ–¥–∞.")

            f = np.sqrt(term)
            return f

        elif self.vpX is not None and self.vpY is not None:
            v1 = np.append(self.vpX, 1.0)
            v2 = np.append(self.vpY, 1.0)

            term = np.dot(v1 - c, c - v2)
            if term <= 0:
                raise ValueError("–ü–æ–¥–∫–æ—Ä–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ—á–∫–∏ —Å—Ö–æ–¥–∞.")

            f = np.sqrt(term)
            return f

    def calc_R(self, f):
        self.camera.intrinsics.set_focal_length(f)
        K_inv = np.linalg.inv(self.camera.intrinsics.get())

        dx = K_inv @ np.append(self.vpX, 1.0)
        dy = K_inv @ np.append(self.vpY, 1.0) if self.vpY is not None else None
        dz = K_inv @ np.append(self.vpZ, 1.0) if self.vpZ is not None else None

        return self._build_rotation(dx, dy, dz)

    def _build_rotation(self, dx, dy, dz):
        # –ù–æ—Ä–º–∏—Ä—É–µ–º
        x = dx / np.linalg.norm(dx)

        if dy is not None and dz is not None:
            y = dy / np.linalg.norm(dy)
            z = dz / np.linalg.norm(dz)

            # –û—Ä—Ç–æ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏–º Y –∏ Z —Ç–∞–∫, —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞
            z = z - np.dot(z, x) * x - np.dot(z, y) * y
            z /= np.linalg.norm(z)

            y = np.cross(z, x)
            y /= np.linalg.norm(y)
        elif dy is None:
            z = dz / np.linalg.norm(dz)
            # –ï—Å–ª–∏ Y –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ
            y = np.cross(z, x)
            y /= np.linalg.norm(y)

        elif dz is None:
            y = dy / np.linalg.norm(dy)
            # –ï—Å–ª–∏ Z –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –µ–≥–æ
            z = np.cross(x, y)
            z /= np.linalg.norm(z)

        else:
            raise ValueError("–í —Å—Ü–µ–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ —Å—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ—á–∫–∏ —Å—Ö–æ–¥–∞.")

        # –°–æ–±–∏—Ä–∞–µ–º R: —Å—Ç–æ–ª–±—Ü—ã ‚Äî –æ—Å–∏ X, Y, Z –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∫–∞–º–µ—Ä—ã
        R = np.column_stack((x, y, z))

        z = R[:, 2]

        if z[2] > 0:  # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–º–µ—Ä–∞ "—Å–º–æ—Ç—Ä–∏—Ç –≤–≤–µ—Ä—Ö" ‚Äî —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            print("[VP Init] ‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞–∑–∞–¥ ‚Äî –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é")
            R[:, 2] *= -1
            R[:, 1] = np.cross(R[:, 2], R[:, 0])
            R[:, 1] /= np.linalg.norm(R[:, 1])

        print(f' [VP Init] Determinant(R): {np.linalg.det(R)}')
        return R

    # def _build_rotation(self, dx, dy, dz):
    #     # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    #     x = dx / np.linalg.norm(dx)
    #     z = dz / np.linalg.norm(dz)
    #
    #     if dy is not None:
    #         y = dy / np.linalg.norm(dy)
    #
    #         # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º y, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞ x –∏ z
    #         # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º "–ø—Ä–∞–≤–∏–ª—å–Ω—É—é" y –∏–∑ x –∏ z
    #         y_proj = np.cross(z, x)
    #         y_proj /= np.linalg.norm(y_proj)
    #
    #         # –£—Ç–æ—á–Ω—è–µ–º x, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª–µ–Ω y_proj –∏ z
    #         x = np.cross(y_proj, z)
    #         x /= np.linalg.norm(x)
    #
    #         # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º y –µ—â—ë —Ä–∞–∑ ‚Äî —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ —Ç–æ—á–Ω–æ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞ x –∏ z
    #         y = np.cross(z, x)
    #         y /= np.linalg.norm(y)
    #     else:
    #         # –ï—Å–ª–∏ Y –Ω–µ –∑–∞–¥–∞–Ω, –¥–æ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤—É—é —Ç—Ä–æ–π–∫—É
    #         y = np.cross(z, x)
    #         y /= np.linalg.norm(y)
    #
    #     # –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–æ–≤–æ—Ä–æ—Ç–∞ R: [x_cam, y_cam, z_cam]
    #     R = np.column_stack((x, y, z))

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ R –ø—Ä–∞–≤–∞—è: det ‚âà +1
    # if np.linalg.det(R) < 0:
    #     # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º y (–∏–ª–∏ x), —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    #     y = -y
    #     R = np.column_stack((x, y, z))
    #
    # return R

    def run(self, data=None, **kwargs):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã –ø–æ —Ç–æ—á–∫–∞–º —Å—Ö–æ–¥–∞.
        :return: –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞
        """
        print("=" * 50)
        print("üéØ [VP Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ç–æ—á–∫–∞–º —Å—Ö–æ–¥–∞")
        print("=" * 50)

        f = self.calc_f()
        print(f"üî¨ –í—ã—á–∏—Å–ª–µ–Ω–æ —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: f = {f:.4f}")

        R = self.calc_R(f)

        self.camera.extrinsics.set_rotation(R, from_type='vp')
        angles = self.camera.extrinsics.get_angles()
        print(f"üß≠ –£–≥–ª—ã –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (ZXY, –≥—Ä–∞–¥): {np.round(angles, 2)}")
        print("‚úÖ [VP Init] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        if self.debug_save_path is not None:
            from source.calibration.debug import visualize_vps_debug
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤: {self.debug_save_path}")
            visualize_vps_debug(self.camera, save_path=self.debug_save_path)

        print("=" * 50)
        return self.camera
