import numpy as np
from source.calibration.utils import gps_to_enu, enu_to_gps
from source.core import PointND


def generate_yandex_maps_url(points):
    base_url = "https://yandex.ru/maps/?pt="
    coords = ["{:.6f},{:.6f}".format(lon, lat) for lat, lon in points]
    return base_url + "~".join(coords)


# –í—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –º–∏—Ä–∞ –∫ gps —á–µ—Ä–µ–∑ SVD
def estimate_rotation_svd(points_cam, points_enu):
    """
    points_cam ‚Äî Nx2 —Ç–æ—á–∫–∏ –∏–∑ –∫–∞–º–µ—Ä—ã (–≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ XY)
    points_enu ‚Äî Nx2 —Ç–æ—á–∫–∏ –≤ ENU —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    A = np.array(points_cam)
    B = np.array(points_enu)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    A_mean = A.mean(axis=0)
    B_mean = B.mean(axis=0)
    A_centered = A - A_mean
    B_centered = B - B_mean

    # SVD –¥–ª—è A.T @ B
    H = A_centered.T @ B_centered
    U, S, Vt = np.linalg.svd(H)
    R = Vt.T @ U.T

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +1)
    if np.linalg.det(R) < 0:
        Vt[1, :] *= -1
        R = Vt.T @ U.T

    return R


def compute_alignment_and_metrics(
        point_image,  # –¢–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        point_gps_ideal,  # –ò–¥–µ–∞–ª—å–Ω—ã–µ GPS —Ç–æ—á–∫–∏
        lat0, lon0,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ENU-—Å–∏—Å—Ç–µ–º—ã
        camera,  # –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã
        save_path="yandex_comparison.html"
):
    # –û–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è GPS –≤ –º–∏—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (XY)
    points_cam = [
        camera.project_back(PointND(pt, add_weight=True)).get()[:2]
        for pt in point_image
    ]

    # –ò–¥–µ–∞–ª—å–Ω—ã–µ GPS ‚Üí ENU
    points_enu = [
        gps_to_enu(lat, lon, lat0, lon0)
        for lat, lon in point_gps_ideal
    ]

    # –ü–æ–≤–æ—Ä–æ—Ç –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ –∏ ENU
    R = estimate_rotation_svd(points_cam, points_enu)
    # print(f"üìê –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞:\n{R}")

    # –ü–æ–¥—Å—á—ë—Ç –æ—à–∏–±–æ–∫ (–≤ ENU)
    errors = [
        np.linalg.norm(
            # np.array(R @ predict) -
            np.array( predict) -
            np.array(ideal)
        )
        for predict, ideal in zip(points_cam, points_enu)
    ]

    stats = {
        "–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞": np.mean(errors),
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": np.std(errors),
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞": np.min(errors),
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞": np.max(errors),
        "–ú–µ–¥–∏–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞": np.median(errors),
    }

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ (–≤ –º–µ—Ç—Ä–∞—Ö):")
    for name, value in stats.items():
        print(f"  ‚ñ∏ {name:<24} {value:.2f} –º")

    # point_gps_predict = [enu_to_gps(*R @ point, lat0, lon0) for point in points_cam]
    point_gps_predict = [enu_to_gps(*point, lat0, lon0) for point in points_cam]

    # url =generate_yandex_maps_url(point_gps_predict)
    # print(f'URL YANDEX {url}')
    save_yandex_comparison_map_html(point_gps_ideal, point_gps_predict, save_path)
    return {
        "rotation_matrix": R,
        "errors": errors,
        "stats": stats,
        "point_gps_predict": point_gps_predict,
        "point_gps_ideal": point_gps_ideal,
    }


def save_yandex_comparison_map_html(point_gps_ideal, point_gps_predict, save_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-—Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–æ–π, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è:
    - –ó–µ–ª—ë–Ω—ã–µ —Ç–æ—á–∫–∏: –∏–¥–µ–∞–ª—å–Ω—ã–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    - –°–∏–Ω–∏–µ —Ç–æ—á–∫–∏: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ GPS (–ø–æ—Å–ª–µ –æ–±—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏)
    - –ö—Ä–∞—Å–Ω—ã–µ –ª–∏–Ω–∏–∏: –≤–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
    """
    if len(point_gps_ideal) != len(point_gps_predict):
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")

    center_lat = sum(lat for lat, lon in point_gps_ideal) / len(point_gps_ideal)
    center_lon = sum(lon for lat, lon in point_gps_ideal) / len(point_gps_ideal)

    placemarks = ""
    polylines = ""

    for i, (ideal, pred) in enumerate(zip(point_gps_ideal, point_gps_predict)):
        lat1, lon1 = ideal
        lat2, lon2 = pred

        placemarks += f"""
        myMap.geoObjects.add(new ymaps.Placemark([{lat1}, {lon1}], {{
            balloonContent: "üìç –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ {i + 1}",
            hintContent: "üìç –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ {i + 1}"
        }}, {{
            preset: "islands#greenDotIcon"
        }}));

        myMap.geoObjects.add(new ymaps.Placemark([{lat2}, {lon2}], {{
            balloonContent: "üéØ –°–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ {i + 1}",
            hintContent: "üéØ –°–ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ {i + 1}"
        }}, {{
            preset: "islands#blueDotIcon"
        }}));
        """

        polylines += f"""
        myMap.geoObjects.add(new ymaps.Polyline([
            [{lat1}, {lon1}],
            [{lat2}, {lon2}]
        ], {{
            hintContent: "–í–µ–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏"
        }}, {{
            strokeColor: "#FF0000",
            strokeWidth: 3,
            strokeOpacity: 0.7
        }}));
        """

    html = f"""<!DOCTYPE html>
<html>
<head>
    <title>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ GPS —Ç–æ—á–µ–∫</title>
    <meta charset="utf-8" />
    <script src="https://api-maps.yandex.ru/2.1/?lang=ru_RU" type="text/javascript"></script>
</head>
<body>
<div id="map" style="width: 100%; height: 600px;"></div>
<script>
ymaps.ready(function () {{
    var myMap = new ymaps.Map("map", {{
        center: [{center_lat}, {center_lon}],
        zoom: 18
    }});

    {placemarks}

    {polylines}
}});
</script>
</body>
</html>"""

    with open(save_path, "w", encoding="utf-8") as f:
        f.write(html)

    print(f"‚úÖ HTML-–∫–∞—Ä—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {save_path}")
