import numpy as np
from source.calibration.utils import gps_to_enu, enu_to_gps
from source.core import PointND


def generate_yandex_maps_url(points):
    base_url = "https://yandex.ru/maps/?pt="
    coords = ["{:.6f},{:.6f}".format(lon, lat) for lat, lon in points]
    return base_url + "~".join(coords)


# –í—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –º–∏—Ä–∞ –∫ gps —á–µ—Ä–µ–∑ SVD
def estimate_rotation_svd(points_cam, points_enu):
    """
    points_cam ‚Äî Nx2 —Ç–æ—á–∫–∏ –∏–∑ –∫–∞–º–µ—Ä—ã (–≤ –º–∏—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ XY)
    points_enu ‚Äî Nx2 —Ç–æ—á–∫–∏ –≤ ENU —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    A = np.array(points_cam)
    B = np.array(points_enu)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏
    A_mean = A.mean(axis=0)
    B_mean = B.mean(axis=0)
    A_centered = A - A_mean
    B_centered = B - B_mean

    # SVD –¥–ª—è A.T @ B
    H = A_centered.T @ B_centered
    U, S, Vt = np.linalg.svd(H)
    R = Vt.T @ U.T

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ (–¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å +1)
    if np.linalg.det(R) < 0:
        Vt[1, :] *= -1
        R = Vt.T @ U.T

    return R


def compute_alignment_and_metrics(
        point_image,  # –¢–æ—á–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        point_gps_ideal,  # –ò–¥–µ–∞–ª—å–Ω—ã–µ GPS —Ç–æ—á–∫–∏
        lat0, lon0,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ ENU-—Å–∏—Å—Ç–µ–º—ã
        camera  # –û–±—ä–µ–∫—Ç –∫–∞–º–µ—Ä—ã
):
    # –û–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è GPS –≤ –º–∏—Ä–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (XY)
    points_cam = [
        camera.project_back(PointND(pt, add_weight=True)).get()[:2]
        for pt in point_image
    ]

    # –ò–¥–µ–∞–ª—å–Ω—ã–µ GPS ‚Üí ENU
    points_enu = [
        gps_to_enu(lat, lon, lat0, lon0)
        for lat, lon in point_gps_ideal
    ]

    # –ü–æ–≤–æ—Ä–æ—Ç –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏ –∏ ENU
    R = estimate_rotation_svd(points_cam, points_enu)
    print(f"üìê –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞:\n{R}")

    # –ü–æ–¥—Å—á—ë—Ç –æ—à–∏–±–æ–∫ (–≤ ENU)
    errors = [
        np.linalg.norm(
            np.array(R @ predict) -
            np.array(ideal)
        )
        for predict, ideal in zip(points_cam, points_enu)
    ]

    stats = {
        "–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞": np.mean(errors),
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": np.std(errors),
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞": np.min(errors),
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞": np.max(errors),
        "–ú–µ–¥–∏–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞": np.median(errors),
    }

    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ (–≤ –º–µ—Ç—Ä–∞—Ö):")
    for name, value in stats.items():
        print(f"  ‚ñ∏ {name:<24} {value:.2f} –º")

    point_gps_predict = [enu_to_gps(*R @ point, lat0, lon0) for point in points_cam]

    url =generate_yandex_maps_url(point_gps_predict)
    print(f'URL YANDEX {url}')
    return {
        "rotation_matrix": R,
        "errors": errors,
        "stats": stats,
    }
