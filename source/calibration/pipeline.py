from source.core.camera import Camera
from .base import Calibration


class CalibrationPipeline:
    def __init__(self, init_stage=None, refine_stages: list = None, n_iter: int = 1):
        """
        :param init_stage: –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–æ–±—ã—á–Ω–æ –ø–æ —Ç–æ—á–∫–∞–º —Å—Ö–æ–¥–∞)
        :param refine_stages: —Å–ø–∏—Å–æ–∫ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ —Ç.–ø.)
        :param n_iter: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
        """
        self.init_stage = init_stage
        self.refine_stages = refine_stages or []
        self.n_iter = n_iter

    def run(self, camera: Camera, data: dict, **kwargs) -> Camera:
        """
        –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –∏—Ç–µ—Ä–∞—Ü–∏–π —É—Ç–æ—á–Ω—è—é—â–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.

        :param camera: –æ–±—ä–µ–∫—Ç Camera
        :param data: —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        :param kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        :return: –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–º–µ—Ä–∞
        """
        if self.init_stage:
            print(f"üöÄ [Pipeline] –ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: {self.init_stage.__class__.__name__}")
            self.init_stage.camera = camera
            camera = self.init_stage.run(data, **kwargs)
            print("‚úÖ [Pipeline] –ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

        for iteration in range(1, self.n_iter + 1):
            print(f"üîÅ [Pipeline] –ò—Ç–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è {iteration}/{self.n_iter}")

            for idx, stage in enumerate(self.refine_stages, 1):
                stage.camera = camera
                print(f"üîß [Pipeline] –≠—Ç–∞–ø {idx}: {stage.__class__.__name__}")
                camera = stage.run(data, **kwargs)
                print(f"‚úÖ [Pipeline] –≠—Ç–∞–ø {idx} –∑–∞–≤–µ—Ä—à—ë–Ω\n")

        print("üéØ [Pipeline] –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("=" * 60)
        print(f"[Pipeline] –ö–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è {[round(float(p), 2) for p in camera.get_params()]}")
        return camera
